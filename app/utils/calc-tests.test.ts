// Generated by CodiumAI

import { calculateTopLevelReturns } from "./calcs-manager";

describe("calculateTopLevelReturns", () => {
  // Calculates monthly income correctly based on rental information
  it("should calculate monthly income correctly when valid rental information is provided", () => {
    const purchase = {
      purchasePrice: 300000,
      annualPropertyTaxes: 3600,
      afterRepairValue: 350000,
      purchaseClosingCost: 5000,
      estimatedRepairCost: 10000,
    };
    const loan = {
      cashPurchase: false,
      downPaymentPercentage: 0.2,
      loanInterestRate: 4.5,
      pointsChargedByLender: 1,
      otherChargesFromLender: 500,
      loanFeesAndPoints: 2000,
      interestOnly: false,
      amortizationYears: 30,
      capRate: 0.05,
    };
    const assumptions = {
      propertyTax: 1.2,
      purchaseClosingCost: 5000,
      downPayment: 60000,
      loanInterestRate: 4.5,
      amortizationLength: 30,
      vacancy: 5,
      repairsAndMaintenance: 10,
      capitalExpenditures: 5,
      managementFees: 8,
      annualIncomeGrowth: 2,
      annualPVGrowth: 3,
      annualExpensesGrowth: 2,
      salesExpenses: 6,
    };
    const rental = {
      totalGrossMonthlyRent: 2000,
      otherMonthlyIncome: 100,
      electricity: 50,
      garbage: 30,
      waterAndSewer: 40,
      hoas: 100,
      monthlyInsurance: 50,
      otherMonthlyExpenses: 20,
    };

    const result = calculateTopLevelReturns(
      purchase,
      loan,
      assumptions,
      rental
    );
    expect(result.monthlyIncome).toBe(2100);
  });

  // Handles zero or negative values in rental income and other income
  it("should handle zero or negative values in rental income and other income", () => {
    const purchase = {
      purchasePrice: 300000,
      annualPropertyTaxes: 3600,
      afterRepairValue: 350000,
      purchaseClosingCost: 5000,
      estimatedRepairCost: 10000,
    };
    const loan = {
      cashPurchase: false,
      downPaymentPercentage: 0.2,
      loanInterestRate: 4.5,
      pointsChargedByLender: 1,
      otherChargesFromLender: 500,
      loanFeesAndPoints: 2000,
      interestOnly: false,
      amortizationYears: 30,
      capRate: 0.05,
    };
    const assumptions = {
      propertyTax: 1.2,
      purchaseClosingCost: 5000,
      downPayment: 60000,
      loanInterestRate: 4.5,
      amortizationLength: 30,
      vacancy: 5,
      repairsAndMaintenance: 10,
      capitalExpenditures: 5,
      managementFees: 8,
      annualIncomeGrowth: 2,
      annualPVGrowth: 3,
      annualExpensesGrowth: 2,
      salesExpenses: 6,
    };
    const rental = {
      totalGrossMonthlyRent: -2000, // Negative value
      otherMonthlyIncome: -100, // Negative value
      electricity: 50,
      garbage: 30,
      waterAndSewer: 40,
      hoas: 100,
      monthlyInsurance: 50,
      otherMonthlyExpenses: 20,
    };

    const result = calculateTopLevelReturns(
      purchase,
      loan,
      assumptions,
      rental
    );
    expect(result.monthlyIncome).toBe(-2100);
  });
});
